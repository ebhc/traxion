* Tasks (See explanation under the Git:AddTasksOrgFile entry)
** DONE [#A] Git:AddTasksOrgFile                                                                          :Life:Traxion:
   SCHEDULED: <2016-12-16 Fri> DEADLINE: <2016-12-16 Fri>
   CLOCK: [2016-12-16 Fri 22:09]--[2016-12-16 Fri 22:35] =>  0:26
   :PROPERTIES:
   :Effort:   0:30
   :END:
   This Emacs Org-Mode file represents the backlog for this project.
   It uses Org-Mode's features for representing the backlog as a list
   of tasks with various types of associated metadata.  The types of
   metadata to be used are: completion status (TODO, BUSY, DONE),
   priority ([#A]...[#G]), tags for grouping, scheduled and deadline
   dates, amount of time spent (as Org-mode CLOCK entries) and an
   effort estimate (the Effort property).  This setup allows Traxion
   to use Org-Mode's entry scanning facilities to gather this data
   (perhaps as part of a larger collection) and represent it in habit
   and goal monitoring visualizations.
** DONE [#B] Git:AddTestHarness                                                                           :Life:Traxion:
   SCHEDULED: <2016-12-16 Fri>
   CLOCK: [2016-12-17 Sat 21:12]--[2016-12-17 Sat 21:59] =>  0:47
   The problem here is to use ERT (the Emacs Regression Testing tool)
   in such a way that some flexibility is provided for running a
   specified subcollection of the full test suite in a separate Emacs
   process (so that all and only all the latest definitions of all
   traxion functions are always used in the test suite.

   A nice solution is to create a simple bash file (ert.sh) which sets
   the environment variable TESTFILES to its entire list of
   command-line arguments, which need to be a list of only
   traxion-*-test.el files.  This script then simply runs
   traxion-ert.el in a new Emacs instance, which in turn extracts and
   requires all the provided symbols of test files in the list it
   obtains from the TESTFILES environment variable, and runs them all
   as a combined ERT test suite.
*** Example command-lines
    bash ert.sh
    bash ert.sh traxion-ert1-test.el
    bash ert.sh traxion-ert2-test.el
    bash ert.sh traxion-ert1-test.el traxion-ert2-test.el
    bash ert.sh traxion-ert2-test.el traxion-ert2-test.el
    bash ert.sh traxion-ert*-test.el
    bash ert.sh traxion-dao*-test.el
    bash ert.sh traxion-entity*-test.el
    bash ert.sh traxion-*-test.el
** BUSY [#A] Git:CreateDao                                                                                :Life:Traxion:
   SCHEDULED: <2016-12-16 Fri>
   CLOCK: [2016-12-18 Sun 21:31]--[2016-12-18 Sun 23:19] =>  1:48
   CLOCK: [2016-12-18 Sun 21:06]--[2016-12-18 Sun 21:24] =>  0:18
   CLOCK: [2016-12-18 Sun 17:55]--[2016-12-18 Sun 20:05] =>  2:10
   CLOCK: [2016-12-18 Sun 11:54]--[2016-12-18 Sun 13:27] =>  1:33
   CLOCK: [2016-12-17 Sat 22:44]--[2016-12-17 Sat 22:58] =>  0:14
   There are to be two implementations of our Data Access Object for
   habit data, one backed by a simple file containing an appropriate
   org-mode table, and the other backed by a sqlite database
   accessible through emacsql.  The idea in practice is that these two
   representations will be sychronised with each other, because in
   some situations it is more convenient to read and write a flat file
   in a terse coded format, and at other times it is more convenient
   (typically for programs) to read from and write to a sqlite
   database.

   It might make sense to use EIEIO, so that we can have an object
   oriented program structure with a common interface that has two
   underlying implementations, instances of both of which we may
   sometimes want to use simultaneously.  A flat structure consisting
   of a collection of related functions doesn't provide that sort of
   flexibility.  We need to be able to create instances of different
   subclasses of a common superclass.  So the question is, (how) does
   EIEIO support this?
** TODO [#D] Git:SetupAsMelpaProject                                                                      :Life:Traxion:
   SCHEDULED: <2016-12-16 Fri>
